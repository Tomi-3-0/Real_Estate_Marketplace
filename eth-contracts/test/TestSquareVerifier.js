// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let TestSquareVer = artifacts.require('Verifier');
// Test verification with correct proof
let dataProof = require('../../zokrates/code/proof.json');
// - use the contents from proof.json generated from zokrates steps
contract('TestSquareVerifier', accounts => {

    const account1 = accounts[0];

    describe('Test if verification has correct proof', function() {
        beforeEach(async function() {
            this.contract = await TestSquareVer.new({ from: account1 });
        });

        it('should be able to return true with correct data verification proof', async function() {
            let outcome = await this.contract.verifyTx.call(
                dataProof.proof.A,
                dataProof.proof.A_p,
                dataProof.proof.B,
                dataProof.proof.B_p,
                dataProof.proof.C,
                dataProof.proof.C_p,
                dataProof.proof.H,
                dataProof.proof.K,
                dataProof.input, { from: account1 }
            );

            assert.equal(outcome, true);
        });

        // Test verification with incorrect proof
        it('should be able to return as false with incorrect data verification proof', async function() {
            let input = [10, 2]
            let outcome = await this.contract.verifyTx.call(
                dataProof.proof.A,
                dataProof.proof.A_p,
                dataProof.proof.B,
                dataProof.proof.B_p,
                dataProof.proof.C,
                dataProof.proof.C_p,
                dataProof.proof.H,
                dataProof.proof.K,
                input, { from: account1 }
            );

            assert.equal(outcome, false);
        })
    })
});